#pragma once
// ===================================================================================================================================
// MxProductID - This is the Root ProductID file. Contains unique identifers for MPT (MxPluginTeam) applications and components 
// ==================================================================================================================================
//
// DO NOT EDIT THIS FILE UNLESS YOU ARE A MEMBER OF MxPluginTeam 
//
// Instead you should obtain a unique organisational code and department acronym from www.mxplugin.org/orgs/register and then create a similar 
// file for your product family named XXX-YYYY-ProductID.h where XXX is your organisational code and YYYY is your department acronym.
// You must #include "MxProductID.h" at the start of this file
//
// NOTE: You will be required to provide proof that you have the right to use your requested organisational code and department acronym
//
//..............................................................................................................................
// Instructions for adding a new product to your own ProductID file
//
//	1. Create an organisational name - i.e. ORG-DEPT. Where ORG is your organisational code and DEPT is your department acronym or a
//	   short descriptive name. The organisational name may be used for registry so keep small and simple; HKEY_CURRENT_USER\Software\UCL-IfWH\
//
//  2. Create a suitable product name -  i.e. MyProduct. It may be used for Windows Registry, so make it unique in context of your 
//     organisational name (HKEY_*\Software\UCL-IfWH\URAExport
//
//	3. Generate a GUID (Visual Studio - Tools | Create GUID, select 3. static const struct GUID={...}
//
//	4. Make the following additions to your ProductID file depending on the type of product you are developing
//		a. Applications : In 'Apps List' create a class to define its ProdID, SID, Name, Description and support/licence site and paste 
//                        GUID, Product Name, Organisational name as appropriate - see ProdIdMxPluginManagerGUI for example (here your
//						  Owner would be "UCL-IfWH" rather than "MxPluginTeam" and your support/licence site would have a URL appropriate for your site)
//		b. General Libs:  In 'General Libs' create a static const GUID and paste GUID as appropriate - see PRODID_MxPluginManager1
//						  for example (read note about naming)
//		c. MxPlugins :    In 'MxPlugin Libs'  create a static const GUID and paste GUID as appropriate - see PRODID_PluginXml for example 
//
//	5. Create resource for your product's Visual Studio Project - version, VS_VERSION_INFO 
//		a. for applications/ general libs
//			i.   set CompanyName = organisational name - i.e. UCL-IfWH
//			ii.  set FileDescription = for apps this is the same as the class defined Description (step 4a), for libs / plugs give something appropriate
//			iii. set FileVersion = see note 1 below - i.e. 1.0.0.1
//			iv.  set InternalName =  the GUID (inc braces) created in step 3 and same as class defined ProdID (step 4) i.e. {4A448E78-6D4A-40DA-9681-78FCFF944231}  
//			v.   set LegalCopyright = IPR owner and date - i.e. Copyright (C) 2015 Will Stott
//			vi.  set OrginalFilename = full name of file - MxUtils1.dll
//			vii. set ProductName = product name - i.e. MyProduct
//		    viii.set ProductVersion = same as FileVersion

//      b. for MxPlugins
//			i. implement the interface defined in IMxPluginLibDetails.h (see step 6 for a suggestion)
//
//	6. Add classes and make changes suggested in MxUtils\LibInfo.h so your app/library/plugin can supply VS_VERSION_INFO information. 
//     However, you can provide this information in your own way if you wish.
//
//  7. Allocate a range of error codes for your new product. Error codes < 20000 are reserved for MxPluginTeam. The use of error codes 
//	   is described in http://docs.plugin.org, but in summary the suggestions are that you should have a unique code for each point
//     of error in your source code. The use of the same error code by different organisations is not a problem because the combination
//     of organisational code and department acronym and error code reported in erorr logs / display should be unique.
//
//................................................................................................................................
//  Instructions for adding a new SocketID (SID) to your own ProductID file
//
//	SocketIDs(SID) serve only to help classify Plugins.For example, you might want to list all the Plugins on your PC that were 
//	developed for Image Computer applications(SID_ImageCompute). There is no MxPlugin architectural restriction on applications 
//  loading different types of Plugin - i.e. an App whose SID=SID_ImageCompute may also load MxPlugin developer for SID_Universal, 
//  or SID_URA, etc
//
//	1.	obtain a new SID from www.mxplugin.org/sid/register
//	2.  Add the information returned to the SID List in your ProductID file
//
//................................................................................................................................
//
//Note 1: Increment values in VS_VERSION_INFO (major.minor.status.build) when changing major, minor or status
//		  major = significant change in functionality, poss not compatible with previous major version number - i.e. user needs to 
//                change how he uses the product in some way. Plugins should always have major version number set as 1 - see note 3.
//		  minor = small change in functionality, backwards compatible with previous version with same major version number
//		  status = 0 - alpha code, 1 - beta code, 30 - release candidate zero, 31 - release candidate 1, etc
//		  build = TFS change set (when a product is released externally create a TFS label with its version number)
//
//Note 2: When making a public release of a general library that has been changed then keep the old static const GUID PRODID_
//		  and generate a a new GUID / static const GUID PRODID_ incrementing the terminating number For example, PRODID_MxUtils1
//		  becomes PRODID_MxUtils2. You should also alter the filename / VS_VERSION_INFO of the new library to reflect this change. 
//		  For example MxUtils1.dll becomes MxUtils2.dll.
//
//Note 3: When making a public release of a Plugin library that has been changed then you would not need to change the
//	      static const GUID PRODID_ as applications are isolated from changes to the internal memory layout of the plugin by 
//		  virtue of accessing it only through its 'C' interfaces. You can also add an interface to a new version of a Plugin whilst
//		  keeping its existing static const GUID PRODID_ as existing applications may find the new interface and so extend their
//		  functionality in some way, or just continue to use the interfaces that existed in the previous Plugin version. Either 
//		  way applications should be able to use the old or the new version of your plugin without breaking.
//
//		  Remember you cannot change an interface once it has been published. Instead you must create a new one. This also
//		  applies if you find yourself wanting to make a change to the interface contract. For example, changing the implementation
//	      of a method described in an interface as 'int calc (int a, int b)' so it returns the sum of the two parameters rather than
//		  the difference. In such a case you should retain the contract of the existing interface (keeping the implementation as 
//		  difference) and create a new interface perhaps with two methods 'int add(int a, int b)' and 'int subtract(int a, int b)'.
//		  Changing an interface is bad because it will break existing applications that will not be able to find the old method
//		  in the interface delivered by the new plugin. Changing an interface contract is evil because existing applications will not
//		  break, but instead will operate differently when the new plugin is installed. 
//
//		  My advice when making changes to the implementation of an interface in your plugin is to focus on improving HOW things 
//		  work (making it faster, more efficient) and avoid like the plague altering WHAT things do. If you find yourself wanting 
//		  to change WHAT your implementation of an interface methods does, then create a new interface and make your changes in
//		  in its implementation. In this way you can keep the existing implementation of the existing interface so applications
//		  that rely on this behavour will continue to work. The exception, of course, is a bug in the implementation of an 
//		  interface method that results in behaviour that violates the interface contract so all applications using your plugin
//		  are not working properly. In such a case you would alter WHAT the implementation does and then conduct a global product
//		  recall to remove your errant plugin from circulation and replace it with the new version that works correctly.
//		  
//................................................................................................................................

#include "IMxPluginBase.h"

static const GUID PRODID_Invalid =	GUID_Invalid;

//============================================================================================================================================================
					//Socket Ids - MxPlugins are developed to support a particular Application socket - a GUID (SID) this may be unique to a particular app, or shared by many apps (normal case) i.e. SID_Universal - see note above
//============================================================================================================================================================
static const GUID SID_Universal =			{ 0x2742858, 0x2cc8, 0x4c92, { 0xbe, 0x69, 0x5c, 0xc7, 0xba, 0x38, 0x7a, 0x7b } };  // {02742858-2CC8-4C92-BE69-5CC7BA387A7B}

//============================================================================================================================================================
					//general libs - load at loadtime
//============================================================================================================================================================
static const GUID PRODID_MxUtils1 =			{ 0x2a3bbf1e, 0xbe54, 0x4573, { 0x94, 0x7, 0x82, 0x8b, 0x6f, 0x7e, 0x7f, 0xdd } };	// Error range 1000-1199 {2A3BBF1E-BE54-4573-9407-828B6F7E7FDD}
static const GUID PRODID_MxPluginManager1 =	{ 0x7595969a, 0x38fa, 0x4fb6, { 0xa5, 0x60, 0x88, 0x3e, 0xc, 0x41, 0x72, 0x8a } };	// Error range 1300-1499 {7595969A-38FA-4FB6-A560-883E0C41728A}	depends: PRODID_MxUtils, (testing only) PRODID_PluginStdLib

//============================================================================================================================================================
					//MxPlugin libs - load at runtime
//============================================================================================================================================================
static const GUID PRODID_PluginStdLib =		{ 0x8cb84f11, 0x8199, 0x4508, { 0xa0, 0x81, 0xfd, 0xad, 0xb7, 0x1, 0x5a, 0xbd } };	// Error range 1200-1249 {8CB84F11-8199-4508-A081-FDADB7015ABD}	depends: PRODID_MxUtils
static const GUID PRODID_PluginXml =		{ 0x9e8e6865, 0xd31e, 0x40a2, { 0xb9, 0x13, 0x59, 0xbe, 0xbc, 0x11, 0xbc, 0x41 } };	// Error range 6000-6299 {9E8E6865-D31E-40A2-B913-59BEBC11BC41}	depends: PRODID_MxUtils, 

//============================================================================================================================================================
					//Applications - list in order of Base Code #
//============================================================================================================================================================

static const GUID PRODID_PluginStdLibApp    = { 0xa471a111, 0x6c72, 0x4f40, { 0x89, 0xe7, 0x42, 0x1a, 0x60, 0x4b, 0xcd, 0x8b } };	// Error range 1250-1299 {A471A111-6C72-4F40-89E7-421A604BCD8B} depends: PRODID_MxUtils
class ProdIdPluginStdLibApp
{
public:
	static const   GUID ProdID() { return PRODID_PluginStdLibApp; }											//Same as MxProductID::ConvertToGUID(VS_VERSION_INFO::InternalName) 
	static char * const Name() { return "PluginStdLibApp"; }												//same as VS_VERSION_INFO::ProductName - 
	static char * const Description() { return "PluginStdLibApp simple exercises PluginStdDetailsLib"; }	//same as VS_VERSION_INFO::FileDescription  
	static char * const SupportSite() { return "http://www.mxplugin.org/apps/support/MxPluginTeam/MxStdLib"; }	
    static char * const LicenceWebPage() { return "http://www.mxplugin.org/apps/license/MxPluginTeam/MxStdLib"; }	
	static const   GUID SID() { return SID_Universal; }														//SocketID - see Socket Id section above 
	static char * const Owner() { return "MxPluginTeam"; }														//used for creating registry key
};

static const GUID PRODID_MxPluginManagerApp = { 0x5895751d, 0xb06b, 0x4c33, { 0x85, 0xd7, 0xa5, 0xb0, 0xf2, 0xc5, 0xb6, 0x2c } };   // Error range 1500-1599 {5895751D-B06B-4C33-85D7-A5B0F2C5B62C} depends: PRODID_MxUtils
class ProdIdMxPluginManagerApp
{
public:
	static const   GUID ProdID() { return PRODID_MxPluginManagerApp; }					//same as MxProductID::ConvertToGUID(VS_VERSION_INFO::InternalName) 
	static char * const Name() { return "MxPluginManagerApp"; }							//same as VS_VERSION_INFO::ProductName - 
	static char * const Description() { return "Support for MxPlugin components"; }		//same as VS_VERSION_INFO::FileDescription  
	static char * const SupportSite() { return "http://www.mxplugin.org/apps/support/MxPluginTeam/MxPluginManagerApp"; }	
    static char * const LicenceWebPage() { return "http://www.mxplugin.org/apps/license/MxPluginTeam/MxPluginManagerApp"; }		
	static const   GUID SID() { return SID_Universal; }									//SocketID - see Socket Id section above 
	static char * const Owner() { return "MxPluginTeam"; }								//used for creating registry key
};

static const GUID PRODID_MxPluginManagerGUI = { 0x949dce6f, 0xfd95, 0x4d61, { 0x87, 0xb1, 0x3d, 0x29, 0x25, 0x50, 0x13, 0xe9 } };	// Error range 1600-1799 {949DCE6F-FD95-4D61-87B1-3D29255013E9} depends: PRODID_MxUtils
class ProdIdMxPluginManagerGUI
{
public:
	static const   GUID ProdID() { return PRODID_MxPluginManagerGUI; }					//same as MxProductID::ConvertToGUID(VS_VERSION_INFO::InternalName) 
	static char * const Name() { return "MxPluginManagerGUI"; }							//same as VS_VERSION_INFO::ProductName - 
	static char * const Description() { return "Support for MxPlugin components"; }		//same as VS_VERSION_INFO::FileDescription  
	static char * const SupportSite() { return "http://www.mxplugin.org/apps/support/MxPluginTeam/MxPluginManagerGUI"; }		//
    static char * const LicenceWebPage() { return "http://www.mxplugin.org/apps/license/MxPluginTeam/MxPluginManagerGUI"; }	
	static const   GUID SID() { return SID_Universal; }									//SocketID - see Socket Id section above 
	static char * const Owner() { return "MxPluginTeam"; }									//used for creating registry key
};

static const GUID PRODID_PluginXmlApp =	      { 0xc3f1d8cc, 0x9965, 0x4589, { 0x88, 0x1a, 0xeb, 0x56, 0x1d, 0x74, 0x85, 0x30 } };	// Error range 6300-6399 {C3F1D8CC-9965-4589-881A-EB561D748530} depends: PRODID_MxUtils, PRODID_MxPluginManager
class ProdIdPluginXmlApp
{
public:
	static const   GUID ProdID() { return PRODID_PluginXmlApp; }						//Same as MxProductID::ConvertToGUID(VS_VERSION_INFO::InternalName) 
	static char * const Name() { return "PluginXmlApp"; }								//same as VS_VERSION_INFO::ProductName - 
	static char * const Description() { return "Wrapped for SimpleXml"; }				//same as VS_VERSION_INFO::FileDescription  
	static char * const SupportSite() { return "http://www.mxplugin.org/apps/support/MxPluginTeam/MxSimpleXmlApp"; }		//
    static char * const LicenceWebPage() { return "http://www.mxplugin.org/apps/license/MxPluginTeam/MxSimpleXmlApp"; }	
	static const   GUID SID() { return SID_Universal; }									//SocketID - see Socket Id section above 
	static char * const Owner() { return "MxPluginTeam"; }									//used for creating registry key
};


//============================================================================================================================================================
// Testing 
//============================================================================================================================================================

static const GUID PRODID_UnitTestApp = { 0xab082a4c, 0xc611, 0x413b, { 0x8b, 0x12, 0xd2, 0x1f, 0xa8, 0x33, 0x7, 0xeb } };	//  {AB082A4C-C611-413B-8B12-D21FA83307EB}
class ProdIdUnitTestApp		//use only for unit testing
{
public:
	static const   GUID ProdID() { return PRODID_UnitTestApp; }
	static char * const Name() { return "UnitTestApp"; }
	static char * const Description() { return "UnitTest App - use only for unit testing"; }
	static char * const SupportSite() { return "http://mxplugin.codeplex.com/"; }
	static char * const LicenceWebPage() { return "http://mxplug.codeplex.com/license"; }
	static const   GUID SID() { return SID_Universal; }
	static char * const Owner() { return "MxPluginTeam"; }
};