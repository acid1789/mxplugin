#pragma once
//=====================================================================================================================================================
//IMxPluginBase.h - MxPlugin base interface - DO NOT EDIT THIS FILE
//=====================================================================================================================================================

#pragma warning(disable: 4995)
#include <atlconv.h>
#include <string>
#pragma warning(default:4995)

#define MXSTDMETHOD  __stdcall


static const GUID GUID_Invalid =	  { 0x00000000, 0x0000, 0x0000, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } };  // {00000000-0000-0000-0000-000000000000}
static const GUID IMxPluginBaseGUID = { 0x82cd2588, 0x457c, 0x41b4, { 0x84, 0xdf, 0xc3, 0x5a, 0xb2, 0xcf, 0x8e, 0xf0 } };  // {82CD2588-457C-41B4-84DF-C35AB2CF8EF0}
class IMxPluginBaseIID
{
public:
	static const GUID		  Guid() { return IMxPluginBaseGUID; }
	static const char * const Name() { return "IMxPluginBase"; }
};

class  IMxPluginBase 
{
public:

virtual long		MXSTDMETHOD DestroyPtr(void) = 0;
virtual long		MXSTDMETHOD DuplicatePtr(void) = 0;
virtual void *		MXSTDMETHOD Dynamic_cast(const GUID IId) = 0;
virtual const GUID	MXSTDMETHOD GetInterfaceGUID(void) = 0;
virtual const char *MXSTDMETHOD GetInterfaceName(void) = 0;
};

class MxGUID
{
public:												

	static const char *ConvertToString(const GUID guid, std::string *out) 
	{ 
		const char *rc = "{ error }";

		if (out != nullptr)
		{
			OLECHAR* bstrGuid = nullptr;
			try
			{
				USES_CONVERSION;
				HRESULT hr = StringFromCLSID(guid, &bstrGuid);
				if (hr == S_OK)
				{
					*out = W2A(bstrGuid);
					::CoTaskMemFree(bstrGuid);
					bstrGuid = nullptr;
					rc = out->c_str();
				}
			}
			catch(...)
			{
			}
			if ( bstrGuid != nullptr)
				::CoTaskMemFree(bstrGuid);
		}
		return rc;
	}

	static const GUID ConvertFromString(const char *guidStr) 
	{ 
		GUID rc = GUID_Invalid;

		if (guidStr != nullptr)
		{
			OLECHAR* bstrGuid = nullptr;
			try
			{
				USES_CONVERSION;
				bstrGuid = A2W(guidStr);
				if (bstrGuid != nullptr)
				{
					GUID tmp = GUID_Invalid;
					HRESULT hr = CLSIDFromString(bstrGuid, &tmp);
					if (hr == S_OK)
					{
						bstrGuid = nullptr;
						rc = tmp;
					}
				}
			}
			catch(...)
			{
			}
		}
		return rc;
	}

	static bool IsValid(const GUID guid)
	{
		return (IsEqual(guid, GUID_Invalid)) ? false : true;
	}

	static bool IsEqual(const GUID guid1, const GUID guid2) 
	{ 
		return ((IsEqualGUID(guid1, guid2) == TRUE) ? true : false);
	}
};